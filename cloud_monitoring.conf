input {
    s3 {
     access_key_id => "{{KEY_ID}}"
     secret_access_key => "{{ACCESS_KEY}}"
     bucket => "{{BUCKET_NAME}}"
     region => "{{REGION}}"
     prefix => "waf-logs"
      additional_settings => {
         force_path_style => true
         follow_redirects => false
       }
     add_field => { "[@metadata][waf]" => "#waf" }
     }
}
    s3 {
     access_key_id => "{{KEY_ID}}"
     secret_access_key => "{{ACCESS_KEY}}"
     bucket => "{{BUCKET_NAME}}"
     region => "{{REGION}}"
     prefix => "alb-logs"
      additional_settings => {
         force_path_style => true
         follow_redirects => false
       }
     add_field => { "[@metadata][d2c_alb]" => "#d2c" }
     }
}
filter {
 if "#d2c" in [@metadata][d2c_alb] {
   grok {
      match => [ "[message]" , '(?<scheme>.*?)[\s](?<timestamp>.*?)[\s](?<prefix>.*?)[\s](?<src_host>.*?):%{BASE10NUM:src_port}\s(?<dst_host>.*?):%{BASE10NUM:dst_port}.*?"(?<method>.*?)[\s](?<uri>.*?)[\s](?<http_version>.*?)"\s"(?<user_agent>.*?)".*:.*?"\s"%{BASE10NUM:status_code}"\s"(?<response>.*?)"' ]
   }
   mutate {
      remove_field => [ "path", "host", "@version", "@timestamp", "message" ]
   }
   date {
#      timezone => "Etc/GMT+8"
      match => ["timestamp", "yyyy-MM-dd'T'HH:mm:ss'.'SSSSSSZ"]
      target => "temp"
   }
   ruby { code => "event.set('epoc', event.get('temp').to_i)" }
   ruby {
    init => "['date', 'tzinfo'].each(&method(:require))"
    code => "
      tz = TZInfo::Timezone.get('Asia/Kuala_Lumpur')
      local = tz.utc_to_local(Time.at(event.get('epoc')))
      event.set('localtime', local.to_s)
#      event.set('timezone', tz.to_s)
    "
   }
   date {
      match => ["localtime", "yyyy-MM-dd HH:mm:ss +0800"]
      target => "@timestamp"
      remove_field => [ "timestamp", "temp", "epoc", "localtime" ]
   }
   mutate {
     add_field => { "[@metadata][csv_path]" => "/data/logs/alb-log/alb-logs-%{+YYYY.MM.dd}.csv" }
   }
   ruby {
        code => "
            begin
                @@csv_file    = event.get('[@metadata][csv_path]')
                @@csv_headers = [ 'Timestamp', 'Scheme', 'Http_Version', 'Method', 'Status_Code', 'Response', 'Source_Host', 'Source_Port', 'Destination_Host', 'Destination_Port', 'Path_Prefix', 'Uri', 'User_Agent' ]
                if File.zero?(@@csv_file) || !File.exist?(@@csv_file)
                    CSV.open(@@csv_file, 'w') do |csv|
                        csv << @@csv_headers
                    end
                end
            end
        "
    }
 ruby { code => ' event.set("[@metadata][everything]", event.to_json) ' }
 if "_grokparsefailure" in [tags] { drop {} }
 }
 ##########
 else if "#waf" in [@metadata][waf] {
 json {
    source => "message"
 }
 mutate {
    add_field => { "Http_request" => "" }
    replace => { "Http_request" => "%{httpRequest}" }
    remove_field => [ "path", "host", "@version", "[Http_request][1]", "@timestamp", "message", "formatVersion", "webaclId", "terminatingRuleId", "terminatingRuleType", "terminatingRuleMatchDetails", "httpSourceName", "httpSourceId", "ruleGroupList", "rateBasedRuleList", "nonTerminatingMatchingRules", "httpRequest"]   
 }
 json {
    source => "[Http_request][0]"
 }
 date {
    match => [ "timestamp", "UNIX_MS" ]
    target => "temp"
 }
 ruby { code => "event.set('epoc', event.get('temp').to_i)" }
 ruby {
  init => "['date', 'tzinfo'].each(&method(:require))"
  code => "
    tz = TZInfo::Timezone.get('Asia/Kuala_Lumpur')
    local = tz.utc_to_local(Time.at(event.get('epoc')))
    event.set('localtime', local.to_s)
#     event.set('timezone', tz.to_s)
   "
 }
 date {
    match => ["localtime", "yyyy-MM-dd HH:mm:ss +0800"]
    target => "@timestamp"
    remove_field => [ "timestamp", "temp", "epoc", "localtime", "Http_request", "requestId", "requestHeadersInserted", "responseCodeSent" ]
 }
 mutate {
    add_field => { "[@metadata][csv_path]" => "/data/logs/waf-log/waf-logs-%{+YYYY.MM.dd}.csv" }
 }
 ruby {
       code => "
           begin
               @@csv_file    = event.get('[@metadata][csv_path]')
               @@csv_headers = [ 'Timestamp', 'Http_Version', 'Country', 'Action', 'Client_Ip', 'Http_Method', 'Uri', 'Args', 'Headers[0]', 'Headers[1]', 'Headers[2]', 'Headers[3]', 'Headers[4]', 'Headers[5]', 'Headers[6]', 'Headers[7]', 'Headers[8]', 'Headers[9]', 'Headers[10]' ]
               if File.zero?(@@csv_file) || !File.exist?(@@csv_file)
                   CSV.open(@@csv_file, 'w') do |csv|
                       csv << @@csv_headers
                   end
               end
           end
       "
  }
 ruby { code => ' event.set("[@metadata][everything]", event.to_json) ' }
 if "_grokparsefailure" in [tags] { drop {} }
 }
 ##########
 else { drop {} }
}

output {
  if "#d2c" in [@metadata][d2c_alb] {
   file {
       codec => line {
          format => '{"@timestamp":"%{[@timestamp]}","scheme":"%{[scheme]}","http_version":"%{[http_version]}","method":"%{[method]}","status_code":"%{[status_code]}","response":"%{[response]}","src_host":"%{[src_host]}","src_port":"%{[src_port]}","dst_host":"%{[dst_host]}","dst_port":"%{[dst_port]}","prefix":"%{[prefix]}","uri":"%{[uri]}","user_agent":"%{[user_agent]}"}'
       }
       path => "/data/logs/alb-log/alb-logs-%{+YYYY.MM.dd}.json"
   }
   csv {
       fields => [ "[@timestamp]", "[scheme]", "[http_version]", "[method]", "[status_code]", "[response]", "[src_host]", "[src_port]", "[dst_host]", "[dst_port]", "[prefix]", "[uri]", "[user_agent]" ]
       path => "/data/logs/alb-log/alb-logs-%{+YYYY.MM.dd}.csv"
   }
   syslog {
       sourcehost => "alb-d2c"
       host => "{{HOST_IP}}"
       port => 1514
       protocol => "udp"
       codec => line {
          format => '{"@timestamp":"%{[@timestamp]}","scheme":"%{[scheme]}","http_version":"%{[http_version]}","method":"%{[method]}","status_code":"%{[status_code]}","response":"%{[response]}","src_host":"%{[src_host]}","src_port":"%{[src_port]}","dst_host":"%{[dst_host]}","dst_port":"%{[dst_port]}","prefix":"%{[prefix]}","uri":"%{[uri]}","user_agent":"%{[user_agent]}"}'
       }
    }}
  else if "#waf" in [@metadata][waf] {
   file {
       codec => line {
          format => '{"@timestamp":"%{[@timestamp]}","http_version":"%{[httpVersion]}","country":"%{[country]}","action":"%{[action]}","client_ip":"%{[clientIp]}","http_method":"%{[httpMethod]}","uri":"%{[uri]}","args":"%{[args]}","headers":"%{[headers]}"}'
       }
       path => "/data/logs/waf-log/waf-logs-%{+YYYY.MM.dd}.json"
   }
   csv {
       fields => [ "[@timestamp]", "[httpVersion]", "[country]", "[action]", "[clientIp]", "[httpMethod]", "[uri]", "[args]", "[headers][0]", "[headers][1]", "[headers][2]", "[headers][3]", "[headers][4]", "[headers][5]", "[headers][6]", "[headers][7]", "[headers][8]", "[headers][9]", "[headers][10]" ]
       path => "/data/logs/waf-log/waf-logs-%{+YYYY.MM.dd}.csv"
   }
   syslog {
       sourcehost => "waf-d2c"
       host => "{{HOST_IP}}"
       port => 1514
       protocol => "udp"
       codec => line {
          format => '{"@timestamp":"%{[@timestamp]}","http_version":"%{[httpVersion]}","country":"%{[country]}","action":"%{[action]}","client_ip":"%{[clientIp]}","http_method":"%{[httpMethod]}","uri":"%{[uri]}","args":"%{[args]}","headers":"%{[headers]}"}'
       }
    }}
  stdout { codec => rubydebug }
}
