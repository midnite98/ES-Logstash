input {
  http {
    host => "{{HOST_IP}}"
    port => "{{PIPELINE_PORT}}"
  }
}
filter {
 if "GoogleID" in [headers][request_path] {
      mutate {
         remove_field => [ "[headers][request_method]", "[headers][http_host]", "[headers][content_length]", "[headers][http_version]", "[headers][http_accept]", "[headers][http_user_agent]", "host", "@version", "@timestamp", "message" ]
         add_tag => [ "success" ]
    }
      grok {
        match => [ "[headers][request_path]" , '.*=(?<google>.*?)[/](?<route>.*?)[/](?<email>.*)' ]
    }
      if "_grokparsefailure" in [tags] { drop {} }
 }

 if "v3rifi3d" in [headers][request_path] and "urlCheck" in [headers][request_path] {
      mutate {
        remove_field => [ "[headers][request_method]", "[headers][http_host]", "[headers][content_length]", "[headers][http_version]", "[headers][http_accept]", "[headers][http_user_agent]", "[headers][content_type]", "host", "@version", "@timestamp" ]
        gsub => [ "message", "ResSepIn@#", '' ]
        gsub => [ "message", "#", "%23" ]
        gsub => [ "message", "\$", "%24" ]
        gsub => [ "message", "&", "%26" ]
        gsub => [ "message", "\+", "%2B" ]
        gsub => [ "message", "/", "%2F" ]
        gsub => [ "message", ":", "%3A" ]
        gsub => [ "message", ";", "%3B" ]
        gsub => [ "message", "=", "%3D" ]
        gsub => [ "message", "\?", "%3F" ]
        gsub => [ "message", "@", "%40" ]
        add_tag => [ "UrlRoute" ]
    }
   }

 if "v3rifi3d" in [headers][request_path] and "domainCheck" in [headers][request_path] {
      mutate {
        remove_field => [ "[headers][request_method]", "[headers][http_host]", "[headers][content_length]", "[headers][http_version]", "[headers][http_accept]", "[headers][http_user_agent]", "[headers][content_type]", "host", "@version", "@timestamp" ]
        gsub => [ "message", "ResSepIn@#", '' ]
        add_tag => [ "DomainRoute" ]
    }
   }

 if "v3rifi3d" in [headers][request_path] {
      grok {
        match => [ "[headers][request_path]"  , '.*/(?<email>.*)' ]
    }
      csv {
        separator => ","
    }
      mutate {
        remove_field => "message"
    }
      ruby {
        code => "
          hash = event.to_hash
          hash.each do |k,v|
                if v == nil
                        event.remove(k)
                end
          end
     "
   }
 }
###################### COLUMN 2 ######################
 if [column2] and "UrlRoute" in [tags] {
  http {
        connect_timeout => 5
        url => "https://api.metadefender.com/v4/url/%{column2}"
        verb => GET
        headers => { "apikey" => "{{OPSWAT_KEY}}"
                     "Content-Type" => "application/json" }
        target_body => "hash2"
 }
    if "_httprequestfailure" in [tags] { drop {} }
 }
 if [column2] and "DomainRoute" in [tags] {
  http {
        connect_timeout => 5
        url => "https://api.metadefender.com/v4/domain/%{column2}"
        verb => GET
        headers => { "apikey" => "{{OPSWAT_KEY}}"
                     "Content-Type" => "application/json" }
        target_body => "hash2"
 }
    if "_httprequestfailure" in [tags] { drop {} }
 }
}
######################################################
output {
   if "success" in [tags] {
   exec {
        command => "wget https://docs.google.com/spreadsheets/d/%{google}/export?format=csv -O /tmp/template.csv && cd /tmp && curl -XPOST -H 'Content-Type: text/csv' 'http://{{HOST_IP}}:{{PIPELINE_PORT}}/v3rifi3d/%{route}/%{email}' -d @template.csv"
 }
}
   if "UrlRoute" in [tags] or "DomainRoute" in [tags] {
   exec {
        command => "echo 'Url, Matched Provider 1, Assessment 1, Matched Provider 2, Assessment 2, Matched Provider 3, Assessment 3, Matched Provider 4, Assessment 4, Matched Provider 5, Assessment 5, Matched Provider 6, Assessment 6, Matched Provider 7, Assessment 7, Encoded Url' > /tmp/hash.csv"
 }
}
   if [hash2] and "UrlRoute" in [tags] or [hash2] and "DomainRoute" in [tags] {
   csv {
        fields => [ "[hash2][address]", "[hash2][lookup_results][sources][0][provider]", "[hash2][lookup_results][sources][0][assessment]", "[hash2][lookup_results][sources][1][provider]", "[hash2][lookup_results][sources][1][assessment]", "[hash2][lookup_results][sources][2][provider]", "[hash2][lookup_results][sources][2][assessment]", "[hash2][lookup_results][sources][3][provider]", "[hash2][lookup_results][sources][3][assessment]", "[hash2][lookup_results][sources][4][provider]", "[hash2][lookup_results][sources][4][assessment]", "[hash2][lookup_results][sources][5][provider]", "[hash2][lookup_results][sources][5][assessment]", "[hash2][lookup_results][sources][6][provider]", "[hash2][lookup_results][sources][6][assessment]", "column2" ]
        path => "/tmp/hash.csv"
 }
}
   if "UrlRoute" in [tags] or "DomainRoute" in [tags] {
   email {
        to => '%{email}'
        codec => "plain"
        debug => 'true'
        via => 'smtp'
        address => 'smtp.gmail.com'
        username => '{{EMAIL}}'
        password => '{{APP_PASS}}'
        subject => '{{PRODUCT}} - Reputation Report'
        body => 'Do not reply! as this was generated automatically by {{PRODUCT}}'
        attachments => ["/tmp/hash.csv"]
        port => 587
        use_tls => true }
#       stdout { codec => rubydebug }
 }
}
